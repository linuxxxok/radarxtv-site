
<!DOCTYPE html>
<html>
<head>
    <script>
        function decodeAndRender() {
            let encodedData = "PCFET0NUWVBFIGh0bWw+ICA8aHRtbCBsYW5nPSJlbiI+ICAKPGhlYWQ+ICAKICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04Ij4gIAogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiPiAgCiAgICA8dGl0bGU+UmFkYXJYTGluZSAtIExpdmUgVXBkYXRlczwvdGl0bGU+ICA8IS0tIOKchSBGaXJlYmFzZSAtLT4gIAo8c2NyaXB0IHNyYz0iaHR0cHM6Ly93d3cuZ3N0YXRpYy5jb20vZmlyZWJhc2Vqcy84LjEwLjAvZmlyZWJhc2UtYXBwLmpzIj48L3NjcmlwdD4gIAo8c2NyaXB0IHNyYz0iaHR0cHM6Ly93d3cuZ3N0YXRpYy5jb20vZmlyZWJhc2Vqcy84LjEwLjAvZmlyZWJhc2UtZGF0YWJhc2UuanMiPjwvc2NyaXB0PiAgCgo8c3R5bGU+ICAKICAgIC8qIOKchSBHZW5lcmFsIFN0eWxpbmcgKi8gIAogICAgYm9keSB7ICAKICAgICAgICBmb250LWZhbWlseTogJ1BvcHBpbnMnLCBzYW5zLXNlcmlmOyAgCiAgICAgICAgbWFyZ2luOiAwOyAgCiAgICAgICAgcGFkZGluZzogMDsgIAogICAgICAgIGJhY2tncm91bmQ6ICMwYTBhMGE7ICAKICAgICAgICBjb2xvcjogI2ZmZjsgIAogICAgICAgIGRpc3BsYXk6IGZsZXg7ICAKICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyAgCiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsgIAogICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOyAgCiAgICAgICAgbWluLWhlaWdodDogMTAwdmg7ICAKICAgIH0gIAoKICAgIC8qIOKchSBSYWRhclhMaW5lIEJveCAqLyAgCiAgICAjcmFkYXJ4LWNvbnRhaW5lciB7ICAKICAgICAgICB3aWR0aDogOTUlOyAgCiAgICAgICAgbWF4LXdpZHRoOiA2MDBweDsgIAogICAgICAgIHBhZGRpbmc6IDE1cHg7ICAKICAgICAgICBtYXJnaW4tdG9wOiAyMHB4OyAgCiAgICAgICAgYmFja2dyb3VuZDogIzEyMTIxMjsgIAogICAgICAgIGJvcmRlcjogMnB4IHNvbGlkICMwMGZmY2M7ICAKICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4OyAgCiAgICAgICAgYm94LXNoYWRvdzogMHB4IDBweCAyMHB4IHJnYmEoMCwgMjU1LCAyMDQsIDAuMyk7ICAKICAgIH0gIAoKICAgIGgxIHsgIAogICAgICAgIGZvbnQtc2l6ZTogMThweDsgIAogICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsgIAogICAgICAgIGJhY2tncm91bmQ6ICMwMGZmY2M7ICAKICAgICAgICBjb2xvcjogIzAwMDsgIAogICAgICAgIHBhZGRpbmc6IDhweDsgIAogICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDsgIAogICAgfSAgCgogICAgLyog4pyFIE1lc3NhZ2VzIEJveCAqLyAgCiAgICAjbWVzc2FnZXMgeyAgCiAgICAgICAgbWF4LWhlaWdodDogMjUwcHg7ICAKICAgICAgICBvdmVyZmxvdy15OiBhdXRvOyAgCiAgICAgICAgbWFyZ2luLXRvcDogMTBweDsgIAogICAgICAgIHBhZGRpbmc6IDEwcHg7ICAKICAgICAgICBiYWNrZ3JvdW5kOiAjMWUxZTFlOyAgCiAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4OyAgCiAgICB9ICAKCiAgICAubWVzc2FnZSB7ICAKICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDI1NSwgMjA0LCAwLjEpOyAgCiAgICAgICAgcGFkZGluZzogMTBweDsgIAogICAgICAgIG1hcmdpbi1ib3R0b206IDhweDsgIAogICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDsgIAogICAgICAgIGZvbnQtc2l6ZTogMTRweDsgIAogICAgICAgIGxpbmUtaGVpZ2h0OiAxLjQ7ICAKICAgICAgICBkaXNwbGF5OiBmbGV4OyAgCiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOyAgCiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsgIAogICAgICAgIGFuaW1hdGlvbjogZmFkZUluIDAuM3MgZWFzZS1pbi1vdXQ7ICAKICAgIH0gIAoKICAgIC8qIOKchSBEYXRlICsgVGltZSBTdHlsaW5nICovICAKICAgIC5tc2ctdGltZSB7ICAKICAgICAgICBmb250LXNpemU6IDEycHg7ICAKICAgICAgICBjb2xvcjogI2JiYjsgIAogICAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4OyAgCiAgICB9ICAKCiAgICAvKiDinIUgRmxhc2ggRWZmZWN0IGZvciBOZXcgTWVzc2FnZXMgKi8gIAogICAgLm1lc3NhZ2UuZmxhc2ggeyAgCiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLCAyNTUsIDEwMCwgMC4zKTsgIAogICAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQgMC41cyBlYXNlLWluLW91dDsgIAogICAgfSAgCgogICAgLyog4pyFIFZpZGVvIFBsYXllciAqLyAgCiAgICAucGxheWVyLWNvbnRhaW5lciB7ICAKICAgICAgICB3aWR0aDogOTUlOyAgCiAgICAgICAgbWF4LXdpZHRoOiA2MDBweDsgIAogICAgICAgIG1hcmdpbi10b3A6IDE1cHg7ICAKICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4OyAgCiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsgIAogICAgICAgIGJveC1zaGFkb3c6IDBweCAwcHggMTVweCByZ2JhKDAsIDI1NSwgMjA0LCAwLjMpOyAgCiAgICB9ICAKCiAgICAucGxheWVyLWNvbnRhaW5lciBpZnJhbWUgeyAgCiAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDsgIAogICAgfSAgCgogICAgLyog4pyFIFRlbGVncmFtIEJ1dHRvbiAqLyAgCiAgICAuam9pbi10ZWxlZ3JhbS1idG4geyAgCiAgICAgICAgbWFyZ2luLXRvcDogMTVweDsgIAogICAgICAgIHBhZGRpbmc6IDEwcHggMjBweDsgIAogICAgICAgIGZvbnQtc2l6ZTogMTRweDsgIAogICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOyAgCiAgICAgICAgY29sb3I6IHdoaXRlOyAgCiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzAwOGZkNjsgIAogICAgICAgIGJvcmRlcjogbm9uZTsgIAogICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDsgIAogICAgICAgIGN1cnNvcjogcG9pbnRlcjsgIAogICAgICAgIGJveC1zaGFkb3c6IDBweCAwcHggMTBweCByZ2JhKDAsIDE0MywgMjE0LCAwLjQpOyAgCiAgICB9ICAKCiAgICAuam9pbi10ZWxlZ3JhbS1idG46aG92ZXIgeyAgCiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNmJiMzsgIAogICAgfSAgCgogICAgLyog4pyFIFNtb290aCBTY3JvbGxiYXIgKi8gIAogICAgI21lc3NhZ2VzOjotd2Via2l0LXNjcm9sbGJhciB7ICAKICAgICAgICB3aWR0aDogNnB4OyAgCiAgICB9ICAKCiAgICAjbWVzc2FnZXM6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHsgIAogICAgICAgIGJhY2tncm91bmQ6ICMxZTFlMWU7ICAKICAgIH0gIAoKICAgICNtZXNzYWdlczo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIgeyAgCiAgICAgICAgYmFja2dyb3VuZDogIzAwZmZjYzsgIAogICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7ICAKICAgIH0gIAoKICAgIC8qIOKchSBGYWRlIEluIEFuaW1hdGlvbiAqLyAgCiAgICBAa2V5ZnJhbWVzIGZhZGVJbiB7ICAKICAgICAgICBmcm9tIHsgb3BhY2l0eTogMDsgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01cHgpOyB9ICAKICAgICAgICB0byB7IG9wYWNpdHk6IDE7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTsgfSAgCiAgICB9ICAKPC9zdHlsZT4KCjwvaGVhZD4gIAo8Ym9keT4gIDwhLS0g4pyFIFJhZGFyWExpbmUgTGl2ZSBVcGRhdGVzIC0tPiAgCjxkaXYgaWQ9InJhZGFyeC1jb250YWluZXIiPiAgCiAgICA8aDE+UmFkYXJYTGluZTwvaDE+ICAKICAgIDxkaXYgaWQ9Im1lc3NhZ2VzIj48L2Rpdj4gIAo8L2Rpdj4gIAoKPCEtLSDinIUgVmlkZW8gUGxheWVyIC0tPiAgCjxkaXYgY2xhc3M9InBsYXllci1jb250YWluZXIiPiAgCiAgICA8aWZyYW1lIGlkPSJjb250ZW50RnJhbWUiIHNhbmRib3g9ImFsbG93LWZvcm1zIGFsbG93LXBvaW50ZXItbG9jayBhbGxvdy1zYW1lLW9yaWdpbiBhbGxvdy1zY3JpcHRzIGFsbG93LXRvcC1uYXZpZ2F0aW9uIiBmcmFtZWJvcmRlcj0iMCIgYWxsb3c9ImVuY3J5cHRlZC1tZWRpYSIgYWxsb3dmdWxsc2NyZWVuPSJ0cnVlIiBzY3JvbGxpbmc9Im5vIiBzcmM9Imh0dHBzOi8vb2ZmZXJzdG9yZS54eXovZGRoLz9wbGF5PTY1IiBzdHlsZT0id2lkdGg6MTAwJTsgaGVpZ2h0OjI1MHB4OyI+PC9pZnJhbWU+ICAKPC9kaXY+ICAKCjwhLS0g4pyFIFRlbGVncmFtIEpvaW4gQnV0dG9uIC0tPiAgCjxidXR0b24gY2xhc3M9ImpvaW4tdGVsZWdyYW0tYnRuIiBvbmNsaWNrPSJ3aW5kb3cub3BlbignaHR0cHM6Ly90Lm1lL3JhZGFyWGNyaWNrZXQnLCAnX2JsYW5rJykiPkpvaW4gVGVsZWdyYW0gQ2hhbm5lbDwvYnV0dG9uPiAgCgo8IS0tIOKchSBGaXJlYmFzZSBDb25maWcgJiBMaXZlIFVwZGF0ZXMgLS0+ICAKPHNjcmlwdD4gIAogICAgY29uc3QgZmlyZWJhc2VDb25maWcgPSB7ICAKICAgICAgICBkYXRhYmFzZVVSTDogImh0dHBzOi8vcmFkYXJ4dHZzY29yZXMtZGVmYXVsdC1ydGRiLmZpcmViYXNlaW8uY29tLyIgIAogICAgfTsgIAoKICAgIGZpcmViYXNlLmluaXRpYWxpemVBcHAoZmlyZWJhc2VDb25maWcpOyAgCiAgICBjb25zdCBkYiA9IGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCIvdGVsZWdyYW1fbWVzc2FnZXMiKTsgIAoKICAgIC8vIOKchSBGZXRjaCBMaXZlIE1lc3NhZ2VzICAKICAgIGRiLm9uKCJjaGlsZF9hZGRlZCIsIHNuYXBzaG90ID0+IHsgIAogICAgICAgIGNvbnN0IGRhdGEgPSBzbmFwc2hvdC52YWwoKTsgIAogICAgICAgIGRpc3BsYXlNZXNzYWdlKHNuYXBzaG90LmtleSwgZGF0YSk7ICAKICAgIH0pOyAgCgogICAgLy8g4pyFIFJlbW92ZSBNZXNzYWdlcyBvbiBEZWxldGUgIAogICAgZGIub24oImNoaWxkX3JlbW92ZWQiLCBzbmFwc2hvdCA9PiB7ICAKICAgICAgICBjb25zdCBtZXNzYWdlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNuYXBzaG90LmtleSk7ICAKICAgICAgICBpZiAobWVzc2FnZUVsZW1lbnQpIHsgIAogICAgICAgICAgICBtZXNzYWdlRWxlbWVudC5yZW1vdmUoKTsgIAogICAgICAgIH0gIAogICAgfSk7ICAKCiAgICAvLyDinIUgRGlzcGxheSBNZXNzYWdlcyB3aXRoIERhdGUgJiBUaW1lICAKICAgIGZ1bmN0aW9uIGRpc3BsYXlNZXNzYWdlKGlkLCBkYXRhKSB7ICAKICAgICAgICBjb25zdCBtZXNzYWdlc0RpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtZXNzYWdlcyIpOyAgCgogICAgICAgIGNvbnN0IG1lc3NhZ2VFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7ICAKICAgICAgICBtZXNzYWdlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCJtZXNzYWdlIiwgImZsYXNoIik7ICAKICAgICAgICBtZXNzYWdlRWxlbWVudC5pZCA9IGlkOyAgCiAgICAgICAgbWVzc2FnZUVsZW1lbnQuaW5uZXJIVE1MID0gYCAgCiAgICAgICAgICAgIDxzcGFuPiR7ZGF0YS50ZXh0fTwvc3Bhbj4gIAogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXNnLXRpbWUiPiR7Zm9ybWF0VGltZShkYXRhLnRpbWVzdGFtcCl9PC9zcGFuPiAgCiAgICAgICAgYDsgIAoKICAgICAgICBtZXNzYWdlc0Rpdi5hcHBlbmRDaGlsZChtZXNzYWdlRWxlbWVudCk7IC8vIOKchSBOZXcgbWVzc2FnZSBib3R0b20gcGUgYWRkIGhvZ2EgIAoKICAgICAgICAvLyDinIUgUmVtb3ZlIEZsYXNoIEVmZmVjdCBBZnRlciAxIFNlYyAgCiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7ICAKICAgICAgICAgICAgbWVzc2FnZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgiZmxhc2giKTsgIAogICAgICAgIH0sIDEwMDApOyAgCgogICAgICAgIC8vIOKchSBBdXRvLXNjcm9sbCB0byBib3R0b20gc21vb3RobHkgIAogICAgICAgIHNldFRpbWVvdXQoKCkgPT4geyAgCiAgICAgICAgICAgIG1lc3NhZ2VzRGl2LnNjcm9sbFRvKHsgIAogICAgICAgICAgICAgICAgdG9wOiBtZXNzYWdlc0Rpdi5zY3JvbGxIZWlnaHQsICAKICAgICAgICAgICAgICAgIGJlaGF2aW9yOiAic21vb3RoIiAgCiAgICAgICAgICAgIH0pOyAgCiAgICAgICAgfSwgMjAwKTsgIAogICAgfSAgCgogICAgLy8g4pyFIEZvcm1hdCBUaW1lc3RhbXAgdG8gRGF0ZSAmIFRpbWUgIAogICAgZnVuY3Rpb24gZm9ybWF0VGltZSh0aW1lc3RhbXApIHsgIAogICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXAgKiAxMDAwKTsgIAogICAgICAgIGNvbnN0IGhvdXJzID0gZGF0ZS5nZXRIb3VycygpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKTsgIAogICAgICAgIGNvbnN0IG1pbnV0ZXMgPSBkYXRlLmdldE1pbnV0ZXMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7ICAKICAgICAgICByZXR1cm4gYCR7aG91cnN9OiR7bWludXRlc31gOyAgCiAgICB9ICAKPC9zY3JpcHQ+Cgo8L2JvZHk+ICAKPC9odG1sPiAgCg==";
            let decodedData = atob(encodedData);
            document.open();
            document.write(decodedData);
            document.close();
        }
    </script>
</head>
<body onload="decodeAndRender()">
</body>
</html>
