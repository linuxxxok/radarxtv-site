<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>RadarXCricket - Live</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/shaka-player/4.3.5/shaka-player.compiled.min.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body {
      background: #0e0e0e;
      color: #fff;
      font-family: 'Poppins', sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 20px;
    }

    .player-wrapper {
      position: relative;
      width: 95%;
      max-width: 960px;
      aspect-ratio: 16/9;
      border-radius: 16px;
      overflow: hidden;
      background: #000;
      border: 2px solid #00ffe0;
      box-shadow: 0 0 20px #00ffe055;
    }

    video {
      width: 100%;
      height: 100%;
      background-color: #000;
    }

    #playButton {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 48px;
      color: #00ffe0;
      background: rgba(0, 0, 0, 0.6);
      border: none;
      border-radius: 50%;
      width: 80px;
      height: 80px;
      cursor: pointer;
      z-index: 10;
    }

    #liveLabel {
      position: absolute;
      top: 10px;
      left: 10px;
      background: red;
      padding: 4px 10px;
      border-radius: 4px;
      font-size: 13px;
      font-weight: bold;
      z-index: 5;
    }

    #qualitySelector {
      position: absolute;
      bottom: 10px;
      right: 10px;
      padding: 6px 12px;
      background: rgba(0, 0, 0, 0.6);
      color: #00ffe0;
      border: 1px solid #00ffe0;
      border-radius: 6px;
      font-size: 14px;
      z-index: 5;
    }
  </style>
</head>
<body>

  <div class="player-wrapper">
    <video id="video" muted playsinline controls></video>
    <button id="playButton">â–¶</button>
    <div id="liveLabel">LIVE</div>
    <select id="qualitySelector">
      <option value="auto">Auto</option>
    </select>
  </div>

  <script>
    const manifestUri = "https://sundirectgo-live.pc.cdn.bitgravity.com/hd38/dth.mpd";
    const keyId = "5e833f4019554aa394ff6de2eb19bf78";
    const key = "f60e08a145804890492f315b61789ac5";

    async function initPlayer() {
      const video = document.getElementById("video");
      const player = new shaka.Player(video);

      shaka.polyfill.installAll();

      player.configure({
        drm: {
          clearKeys: {
            [keyId]: key
          }
        },
        streaming: {
          bufferingGoal: 4,
          rebufferingGoal: 2,
          lowLatencyMode: true,
          retryParameters: {
            maxAttempts: 5,
            baseDelay: 1000,
            backoffFactor: 2,
            fuzzFactor: 0.5
          },
          abr: {
            enabled: true,
            defaultBandwidthEstimate: 8000000
          }
        }
      });

      player.addEventListener('error', e => {
        console.error('Error Code', e.detail.code, e.detail);
        alert("Playback Error: " + e.detail.message);
      });

      try {
        await player.load(manifestUri);
        console.log('Stream loaded');

        const tracks = player.getVariantTracks().filter(t => t.height);
        const qualitySelector = document.getElementById("qualitySelector");

        tracks.sort((a, b) => b.height - a.height).forEach(track => {
          const option = document.createElement("option");
          option.value = track.id;
          option.text = `${track.height}p (${Math.round(track.bandwidth / 1000)} kbps)`;
          qualitySelector.appendChild(option);
        });

        qualitySelector.addEventListener("change", () => {
          if (qualitySelector.value === "auto") {
            player.configure({ abr: { enabled: true } });
          } else {
            player.configure({ abr: { enabled: false } });
            const track = tracks.find(t => t.id == qualitySelector.value);
            if (track) player.selectVariantTrack(track, true);
          }
        });

        const maxTrack = tracks[0];
        player.configure({ abr: { enabled: false } });
        player.selectVariantTrack(maxTrack, true);
        qualitySelector.value = maxTrack.id;

        document.getElementById('playButton').addEventListener('click', () => {
          video.play();
          document.getElementById('playButton').style.display = 'none';
        });

      } catch (e) {
        console.error("Stream load failed", e);
        alert("Stream failed to load.");
      }
    }

    document.addEventListener("DOMContentLoaded", initPlayer);
  </script>
</body>
</html>